<?php

ini_set('display_errors', 1);
specimen_EML_to_array($testimen);
/**
 * @file
 * This is the specimen module.
 */


function islandora_lab_object_specimen_forms($form_id, $args){
  /**
   * @author Nolan Phillips ncphillips@upei.ca
   *
   * @param $form_id
   * @param $args
   * @return $forms
   *
   * Implements hook_forms($form_id, $args)
   *
   * This function is used to associate a new Form ID with an existing form constructor.
   */
  $forms = array();
  switch($form_id){
    /**
     * ## Related People Form
     * __Form ID:__ `related_specimen_form`
     *
     * __Form Base ID:__ `related_islandora_objects_form`
     *
     * Creates a `related_islandora_objects_form` with the `$cmodel` and `$relationships`
     * arguments set as:
     *
     *      $cmodels = array('islandora:specimen_cmodel');
     *      $relationships = array(FEDORA_RELS_EXT_URI => array('isPartOf'),);
     */
    case 'related_specimen_form':
      $cmodels = array('islandora:specimen_cmodel');
      $relationships = array(FEDORA_RELS_EXT_URI => array('isPartOf', 'isMemberOf',),);

      $args[] = $cmodels;
      $args[] = $relationships;

      $forms['related_specimen_form'] = array(
        'callback' => 'related_islandora_objects_form',
        'callback arguments' => $args,
      );
      break;
  }
  return $forms;
}


/**
 * @author Brent Mitton
 * 
 */
function islandora_lab_object_specimen_menu() {
  return array(
      'sponge/classes' => array(
        'title' => "Autocomplete Sponge Classes",
        'page callback' => "_sponge_class_autocomplete",
        'access arguments' => true,
        'type' => MENU_CALLBACK
      ),

      'islandora/object/%islandora_object/test_ingest_specimen' => array(
        'title' => 'Ingest Specimen',
        'page callback' => 'rel_lab_object_specimen_ingest',
        'page arguments' => array(2),
        'access callback' => TRUE,
      ),

      'islandora/objects/%islandora_objects/specimen' => array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array(2),
      )

    );
}

/**
 * @author Brent Mitton
 * Implements the required_objects() hook. This is responsible for creating the 
 * necessary objects in fedora when we install the solution pack. In the case
 * of specimen, all we need to install is the DS-Composite-Model
 */
function islandora_lab_object_specimen_islandora_required_objects(IslandoraTuque $connection) {
  module_load_include('inc', 'islandora_bioinformatics_base', 'base_functions');

  $module_path = drupal_get_path('module', 'islandora_lab_object_specimen');
  $content_model = $connection->repository->constructObject('islandora:specimen_cmodel');
  $content_model->owner = 'fedoraAdmin';
  $content_model->label = 'Bioinformatics Specimen Content Model';
  $content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  $datastream = $content_model->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/specimen_ds_composite_model.xml", FALSE);
  $content_model->ingestDatastream($datastream);
  
  //Create relationship with LabObject
  $content_model->relationships->add(FEDORA_MODEL_URI, 'hasModel', 'islandora:lab_object_cmodel');

  // Project Collection
  $specimen_collection = $connection->repository->constructObject('islandora:specimen_collection');
  $specimen_collection->owner = 'fedoraAdmin';
  $specimen_collection->label = 'Specimen Collection';
  $specimen_collection->models = 'islandora:collectionCModel';
  $specimen_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  $datastream = $specimen_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/specimen_collection_policy.xml", FALSE);
  $specimen_collection->ingestDatastream($datastream);


  // set up the relationship between projects and specimens
  $project_cm = islandora_object_load("islandora:project_cmodel");

  add_hasPart($project_cm, "islandora:specimen_cmodel");
  add_isPartOf($content_model, "islandora:project_cmodel");


  return array(
    'islandora_lab_object_specimen' => array(
      'title' => 'Bioinformatics Specimen',
      'objects' => array(
          $content_model,
          $specimen_collection,
      ),
    ),
  );
}


/**
 * @author Brent Mitton
  * Implements the form_builder_forms() hook. This is responsible for loading
  * the form xml that we create in form builder. This will add the form into 
  * the system as a built in form.
  */
function islandora_lab_object_specimen_islandora_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'islandora_lab_object_specimen');
  $forms = array(
    'Microbial Form' => array(
      'form_file' => "$module_path/xml/microbial_form.xml",
    ),
    'Invertebrate Form' => array(
      'form_file' => "$module_path/xml/invertebrate_form.xml"
    ),
  );

  return $forms;
}

/**
 * @author Brent Mitton
  * Implements the form_builder_form_associations() hook. This is responsible
  * for associating the form that we create in the form_builder_form() hook
  * with the content-model that we created in the required_objects() hook.
  */
function islandora_lab_object_specimen_islandora_xml_form_builder_form_associations() {
  $module_path = drupal_get_path('module', 'islandora_lab_object_specimen');


  $form_assoc = array(
    'islandora_lab_object_specimen_invertebrate_form' =>array(
        'content_model' => "islandora:specimen_cmodel",
        'form_name' => "Invertebrate Form",
        'dsid' => 'EML',
        'title_field' => array('lab_identifier'),
        'transform' => '',
        'template' => FALSE,
    ),
    'islandora_lab_object_specimen_microbial_form' =>array(
        'content_model' => "islandora:specimen_cmodel",
        'form_name' => "Microbial Form",
        'dsid' => 'EML',
        'title_field' => array('lab_identifier'),
        'transform' => '',
        'template' => FALSE,
    ),
  );
  return $form_assoc;

}

/**
 * @author Brent Mitton
 * Creates an additional ingest step, which will be displayed after the initial
 * form. For this module this means displaying an image upload form.
 */
function islandora_lab_object_specimen_islandora_specimen_cmodel_islandora_ingest_steps(array $configuration) {
  return array(
    'islandora_lab_object_specimen_file_upload' => array(
      'weight' => 10,
      'type' => 'form',
      'form_id' => 'islandora_lab_object_specimen_upload_form',
      'module' => 'islandora_lab_object_specimen',
      'file' => 'includes/islandora_lab_object_specimen_upload.form.inc'
    ),
    'islandora_lab_object_specimen_project_relate' => array(
      'weight' => 15,
      'type' => 'form',
      'form_id' => 'islandora_lab_object_specimen_project_form',
      'module' => 'islandora_lab_object_specimen',
      'file' => 'includes/islandora_lab_object_specimen_project.form.inc'
    )
  );
}


/**
 * @author Brent Mitton
 * This "registers" the theme so in the system. 
 * 'template' points to a tpl file, which will be mostly under front-end
 *    control
 * 'pattern' I'm not sure what this does, but I don't think it really matters
 *    too much.
 *
 *  'variables' This doesnt have too much functional purpose, it says what sort
 *    of things should be in the $variables array
 */
function islandora_lab_object_specimen_theme($existing, $type, $theme, $path) {
  
  return array(
    'islandora_lab_object_specimen' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/specimen-theme',
      'pattern' => 'islandora_lab_object_specimen__',
      'variables' => array('islandora_object' => NULL),
    ),
  );
}

/**
 * @author Brent Mitton
 * Here we populate the $variable array with what we want to send to the 
 * template. After this point the front end takes over. We should be able
 * The second argument in theme() is the contents of the $variable array that
 * the front-end will use. In this case, I'm just passing them a single 
 * islandora_object. We could also do tuque stuff in here, or any sort of 
 * PHP
 */
function islandora_lab_object_specimen_islandora_specimen_cmodel_islandora_view_object($object, $page_number, $page_size) {
  $output = theme('islandora_lab_object_specimen', array('islandora_object' => $object));
  return array('' => $output);
}



function _sponge_class_autocomplete($string){
  $matches = array();
  
  $result = db_select('labobject_sponge_class', 'c')
    ->fields('c', array('class'))
    ->condition('class', '%' . db_like($string) . '%', 'LIKE')
    ->execute();
  // save the query to matches
  foreach ($result as $row) {
    $matches[$row->class] = check_plain($row->class);
  }

  drupal_json_output($matches);
}


function islandora_lab_object_specimen_form_related_specimen_form_alter(&$form, &$form_state) {
  /**
   * @author Brent Mitton
   * @param &$form
   * @param &$form_state
   *
   * Alters the islandora_related_objects_base form to display specimen information.
   */
  $object = $form_state['object'];
  $specimens = $form_state['related_objects'];

  $header = array(
    'lab_id' => t("Lab ID"),
    'type' => t("Specimen Type"),
    'genus' => t("Genus"),
    'species' => t("Species"),
  );

  $options = array();

  foreach($specimens as $specimen){

    $specimen_eml = specimen_EML_to_array($specimen);
    $specimen_url = "<a href='/islandora/object/{$specimen->id}'>{$specimen_eml['identifier']}</a>";
    $options[$specimen->id] = array(
      'lab_id' => $specimen_url,
      'type' => $specimen_eml['type'],
      'genus' => $specimen_eml['genus'],
      'species' => $specimen_eml['species'],
      '#attributes' => array("style" => "max-height: 100px;"),
    );
  }

  $form['table'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $options,
    '#empty' => t('There are no specimens related to ' . $object->id . '.'),
  );

  return $form;
}

/**
 *
 * Takes a specimen object and returns an array of the EML data. I'm not sure what data
 * we are required to have in the array yet.
 *
 * @param $specimen_object
 *  A specimen object
 * @return array
 *  a simple array containing specimen data
 */
function specimen_EML_to_array($specimen_object){
  $ns = "eml://ecoinformatics.org/eml-2.1.0";

  $specimen_xml = new SimpleXMLElement($specimen_object["EML"]->content);

  $specimen_eml = array();

  foreach ($specimen_xml->children($ns) as $part){
    switch ((string) $part->getName()){
      case "formtype":
        $specimen_eml["type"] = ((string)$part) ? (string)$part:"";
        break;
      case "lab_identifier":
        $specimen_eml["identifier"] = ((string)$part) ? (string)$part:"";
        break;
      case "lab_location":
        break;
      case "specimen_description":
        break;
      case "dataset":
        $specimen_eml["genus"] = ($part->coverage->taxonomicCoverage->taxonomicClassification[5]->taxonRankValue) ? $part->coverage->taxonomicCoverage->taxonomicClassification[5]->taxonRankValue:"";
        $specimen_eml["species"] = ($part->coverage->taxonomicCoverage->taxonomicClassification[6]->taxonRankValue) ? $part->coverage->taxonomicCoverage->taxonomicClassification[6]->taxonRankValue:"";;
        break;
    }
  }

  return $specimen_eml;
}


/**
* @author Quintin Dawson qdawson@upei.ca
* This function should create a new specimen object and create a relationship between it and the $parent object
*/

function rel_lab_object_specimen_ingest(AbstractObject $parent) {
  //dpm($parent);
  echo '<pre>';
  var_dump($parent);
  //var_dump($parent->models);
  //var_dump($parent['COLLECTION_POLICY']);
  //var_dump($parent['COLLECTION_POLICY']->content);
  echo '</pre>';

  $tuque = new IslandoraTuque();
  
  //create the object to be ingested
  
  //$object = $tuque->repository->constructObject('islandora');
  $object = $tuque->repository->constructObject('fake:pid');
  
  $object->owner = 'fedoraAdmin';
  $object->label = "New Object";
  $object->models = 'islandora:specimen_cmodel';
  
  $object->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:specimen_collection');
  
  //form a relationship between the parent object and the object being ingested
  $object->relationships->add(FEDORA_RELS_EXT_URI, 'hasModel', $parent->id);
  
  //ingest the object
  //$tuque->repository->ingestObject($object);
  
  
  //generate the $configuration array
  $configuration = array(
    'collection' => $parent,    //this was $collection
    'models' => array('islandora:specimen_cmodel'),
    'objects' => array($object),
    'parent' => $parent->id,   //this was $collection->id
  );
  
  return drupal_get_form('islandora_ingest_form', $configuration);
  
  //find how to set the $collection varaible in the original example at https://github.com/Islandora/islandora_solution_pack_collection/blob/7.x/includes/ingest.form.inc and reproduce
}
